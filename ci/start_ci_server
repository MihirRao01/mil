#!/bin/bash

# Make sure user has the agent token set
if [ -z "$BUILDKITE_AGENT_TOKEN" ]; then
  echo "BUILDKITE_AGENT_TOKEN not set"
  echo "Please get agent token from https://buildkite.com/organizations/uf-mil/agents"
  echo "Then run command again like:"
  echo "BUILDKITE_AGENT_TOKEN=<token> ./run_ci"
  exit 1
fi

# Detect already running agents
RUNNING_AGENTS=$(docker ps --filter "name=mil-buildkite-agent" -q)
if [ "$RUNNING_AGENTS" ]; then
  read -p "Buildkite agents are already running. Close them? y/n:" -e -r yn
  echo
  case $yn in
    [Yy]* )
	for x in  $RUNNING_AGENTS; do
	  docker kill --signal SIGINT $x
          docker wait $x
	  echo "Killed $x"
	done;;
    [Nn]* ) echo "Will not attempt to start buildkite when containers are already running"; exit;;
    * ) echo "Please answer yes or no."; exit;
  esac
  echo
fi

# BUILDKITE_PARALLELISM
BUILDKITE_PARALLELISM=${BUILDKITE_PARALLELISM:-"-1"}
if [ "$BUILDKITE_PARALLELISM" == "-1" ]; then
   BUILDKITE_PARALLELISM=1
   echo "BUILDKITE_PARALLELISM was not set, will run paralleism $BUILDKITE_PARALLELISM"
fi

# Get directory of the MIL repo for resolution of other files in this repo
MIL_DIR="$(realpath $(dirname $BASH_SOURCE)/..)"

# Build containers used by CI (no-op if they're already build)
$MIL_DIR/scripts/build_docker_containers

# Make sure the builds directory is there
mkdir -p /var/lib/buildkite/builds

for IT in $(seq 1 $BUILDKITE_PARALLELISM);
do
    # Start the container
    docker run \
      -v "/var/lib/buildkite/builds:/var/lib/buildkite/builds" \
      -v "/var/run/docker.sock:/var/run/docker.sock" \
      -e "BUILDKITE_BUILD_PATH=/var/lib/buildkite/builds" \
      --detach \
      --rm \
      --name mil-buildkite-agent$IT \
      uf-mil:ci-server start --token $BUILDKITE_AGENT_TOKEN
done
