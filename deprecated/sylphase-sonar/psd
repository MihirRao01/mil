#!/usr/bin/python

from __future__ import division

import threading
import sys
import random

import numpy
import matplotlib.animation
import matplotlib.pyplot as plt

import util

CAPTURE_SAMPLES = 10000  # determines number of fft bins

avg = {stream: None for stream in xrange(4)}


def handle_capture(capture):
    if random.random() > .1:
        return
    for i, samples in enumerate(capture):
        samples = samples - numpy.mean(samples)
        freq = numpy.fft.rfftfreq(len(samples), 1 / util.fs)
        fft = numpy.fft.rfft(
            samples * numpy.hamming(len(samples))) / len(samples)

        res = 10 * numpy.log10(numpy.abs(fft * fft.conj()) + 1e-100)
        if avg[i] is not None:
            res = .95 * avg[i][1] + .05 * res
        avg[i] = freq, res


gen = util.connect_to_samples(CAPTURE_SAMPLES)


def read_thread():
    for samples in gen:
        handle_capture(samples)


threading.Thread(target=read_thread).start()


def redraw(frame):
    plt.cla()
    plt.title(' '.join(sys.argv))
    plt.ylim([-60, 60])
    for i in xrange(4):
        if avg[i] is None:
            continue
        plt.plot(avg[i][0], avg[i][1], label='Channel: {}'.format(i))
    plt.legend()


fig, ax = plt.subplots()
ani = matplotlib.animation.FuncAnimation(fig, redraw, interval=100)
plt.show()
