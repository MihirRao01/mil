#!/bin/bash
set -euo pipefail

if [[ $EUID -ne 0 ]] && [[ $(id -Gn "$USER" | grep -c "docker") == 0 ]] ; then
  echo "You need docker access to run this script."
  echo "Either add yourself to the docker group or run this script as sudo."
  exit 1
fi

# Allow the tag name to have prefix, used by CI
MIL_DOCKER_TAG_ROOT=${MIL_DOCKER_TAG_ROOT:-"uf-mil"}

# Quite mode so will only output if something goes wrong
DOCKER_ARGS=""

# Cache path in repo where dockerfiles are
DOCKER_BASE_PATH="$(realpath $(dirname $BASH_SOURCE)/../docker)"

build_mil_docker_image()
{
  docker build $DOCKER_ARGS $DOCKER_BASE_PATH/$1 -t $MIL_DOCKER_TAG_ROOT:$1 --build-arg MIL_DOCKER_TAG_ROOT=${MIL_DOCKER_TAG_ROOT}
}

build_vrx_image()
{
  # see if user is nvidia gpuer
  local NVIDIA="`grep -s -c \"X Driver\"  /var/log/Xorg.0.log`"
  # if no X Driver found, no nvidia driver installed: make the normal image
  echo $NVIDIA
  if [ "${NVIDIA}" != "1" ]; then
    # build regular image
    echo "building non-nvidia vrx server"
    $(realpath $(dirname $BASH_SOURCE)/../)/NaviGator/simulation/vrx/docker/build.bash $(realpath $(dirname $BASH_SOURCE)/../)/NaviGator/simulation/vrx/
  # else,X Driver found, nvidia driver installed: make the nvidia image
  else
    # build nvidia image
    echo "building nvidia vrx server"
    $(realpath $(dirname $BASH_SOURCE)/../)/NaviGator/simulation/vrx/docker/build.bash -n $(realpath $(dirname $BASH_SOURCE)/../)/NaviGator/simulation/vrx/
  fi
}

# Build each of the images
build_vrx_image
build_mil_docker_image base
build_mil_docker_image dev
build_mil_docker_image ci-build
build_mil_docker_image ci-server

